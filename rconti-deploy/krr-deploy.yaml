apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: query-krr
  namespace: user-rconti
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - configmaps
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - "extensions"
  resources:
  - deployments
  - deployments/scale
  - ingresses
  - replicasets
  - replicasets/scale
  - replicationcontrollers/scale
  verbs:
  - get
  - watch
  - list
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-krr
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sa-krr
  namespace: user-rconti
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: query-krr
subjects:
- kind: ServiceAccount
  name: sa-krr
  namespace: user-rconti
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: krr
  name: krr
  namespace: user-rconti
spec:
  selector:
    matchLabels:
      app: krr
  template:
    metadata:
      annotations:
        log.splunk8s.io/sourcetype: tsv-krr
        log.splunk8s.io/sourcetype.applications: tsv-krr-applications
        # new type to see if splunk gets "polluted" as soon as a non-compliant file matches a sourcetype
        log.splunk8s.io/sourcetype.applications-2: tsv-krr-applications-2
        log.splunk8s.io/sourcetype.applications-3.tsv: tsv-krr-applications-3
      labels:
        app: krr
    spec:
      containers:
        - image: cloudrepo-docker-playground.jfrog.io/user-rconti/krr:1.0.10
          name: krr
          volumeMounts:
          - mountPath: /output
            name: logs-krr
      volumes:
        - name: "logs-krr"
          emptyDir: {}
      serviceAccountName: sa-krr
